{
    "version": "0",
    "updateMessage": "From Scala",
    "templateName": "05",
    "templateStrs": [
        "Your task is to generate quiz questions that evaluate the competency of university students with respect to\na particular concept in a particular university course. You will be given the name of a concept, the name of\nthe course, a competency to test for, a number indicating how many questions to generate, and a list of learning\nobjects for the concept, including the definition used in the course.\n\nThe learning objects are enclosed in three single quotes and separated by newline characters.\n\nA competency is a cognitive dimension according to Bloom\u2019s taxonomy and is provided as one of the strings\n\"remember\", \"understand\", \"apply\", \"analyse\", \"evaluate\", or \"create\".\n\nThe learning objects will be given as a list of LaTeX snippets, using the sTeX package for semantic markup.\nIn sTeX, concepts are declared using the \\symdecl or \\symdef commands, and can be referred to using\n\\sr{concept}{text} or \\sn{concept}.\nConcepts are bundled in modules, which can be imported using the \\importmodule macro.\n\nA quiz question can be either a multiple choice question, a single choice question or a fill-in-the-blanks question,\nand should be marked up using the \\objective macro to indicate the concept and competency being tested. We can also\nprovide feedback for each answer option using the feedback key of the relevant macros. This feedback is shown to the\nstudent after they have submitted their answer.\n\nAn example for a multiple choice question is the following; note the semantic markup:\n```\n\\begin{sproblem}\n  \\usemodule[smglom/sets]{mod?bijective}\n  \\usemodule[smglom/sets]{mod?relation-composition}\n  \\usemodule[smglom/arithmetics]{mod?natarith}\n  \\objective{understand}{bijective}\n  \\objective{understand}{injective}\n  \\objective{understand}{surjective}\n\n  Assume $\\fun{f,g}\\NaturalNumbers\\NaturalNumbers$.  Which of the following are true?\n  \\begin{mcb}\n    \\mcc[F,feedback={No, $f$ and $g$ are unrelated}]\n      {If $f$ is \\sn{injective}, so is $g$.}\n    \\mcc[F,feedback={No. since $f$ does not need to be \\sn{surjective}, the \\sr{surjective}{surjectivity} of $g$ is not enough to make the \\sr{compose}{composition} of $f$ and $g$ \\sn{surjective}.}]\n      {If $f$ is \\sn{injective} and $g$ is \\sn{surjective}, then $\\compose{g,f}$ is \\sn{surjective}.}\n    \\mcc[F,feedback={No. Since $f$ need not be \\sn{surjective}, the \\sn{composition} need not be \\sn{surjective} either.}]\n      {If $f$ is \\sn{injective} and $g$ is \\sn{surjective}, then $\\compose{g, f}$ is \\sn{bijective}.}\n    \\mcc[T]{If $f$ and $g$ are \\sn{injective}, so is $\\compose{g,f}$.}\n    \\mcc[T]{If $f$ and $g$ are \\sn{surjective}, so is $\\compose{g,f}$.}\n  \\end{mcb}\n\\end{sproblem}\n```\nThe question is answered correctly, if the student selects exactly the \\mcc options marked with [T].\n\nAn example for a single choice question is the following:\n```\n\\begin{sproblem}\n \\usemodule[smglom/arithmetics]{mod?realarith}\n \\usemodule[smglom/probability]{mod?probability-distribution}\n \\objective{understand}{probability}\n\n Given a fair coin with two possible outcomes when flipping it: heads or tails.\n What is the \\sn{probability} that one gets one tails and two heads if one flips it three times?\n \\begin{scb}\n   \\scc{$\\realdivide{1}{3}$}\n   \\scc[T]{$\\realdivide{3}{8}$}\n   \\scc[F,feedback={No; that would only be true if we cared about the \\emph{order} as well}]{$\\realdivide{1}{8}$}\n \\end{scb}\n\\end{sproblem}\n```\nThe question is answered correctly, if the student selects the one \\scc option marked with [T].\n\nAn example for a fill-in-the-blanks question is the following:\n```\n\\begin{sproblem}\n  \\usemodule[MiKoMH/AI]{search/slides?a-star}\n  \\usemodule[MiKoMH/AI]{search/slides?ts-impl}\n  \\usemodule[MiKoMH/AI]{search/slides?greedy-search}\n  \\usemodule[MiKoMH/AI]{search/slides?bf-search}\n  \\usemodule[MiKoMH/AI]{search/slides?uc-search}\n  \\objective{apply}{DFS}\n  \\objective{apply}{BFS}\n  \\objective{apply}{UCS}\n  \\objective{apply}{greedy search}\n  \\objective{apply}{astar search}\n  Consider the following \\sn{directed graph}:\n\n  \\tikzinput{search_graph.tex}\n\n  Every \\sn{node} is \\sn[post=ed]{label} with $n:h(n)$ where $n$ is the identifier of the\n  \\sn{node} and $h(n)$ is the \\sn{heuristic} for estimating the \\sn{cost} from $n$ to a\n  \\sn{goal node}.  Every \\sn{edge} is \\sn{labeled} with its actual \\sn{cost}.\n\n  Now assume you have already \\sn[post=ed]{expand} the \\sn{node} $A$. List the\n  \\textbf{next $4$ nodes (i.e., excluding $A$)} that will be \\sn[post=ed]{expand} using\n  the respective \\sn{algorithm}.  If there is a tie, break it using alphabetical order.\n\n  Enter your answers using upper-case letters without separators, e.g., ABCD.\n  \\begin{enumerate}\n    \\item Using \\sr{DFS}{depth-first search}: \\fillinsol{BCFH}\n    \\item Using \\sr{BFS}{breadth-first search}: \\fillinsol{BCEF}\n    \\item Using \\sr{UCS}{uniform-cost search}: \\fillinsol{CFBE}\n    \\item Using \\sn{greedy search}: \\fillinsol{BECG}\n    \\item Using \\sr{astar search}{$A^\\ast$-search}: \\fillinsol{CFGB}\n  \\end{enumerate}\n\\end{sproblem}\n```\nThe question is answered correctly, if the student provide exactly the arguments of the \\fillinsol macros, i.e. in this\nexample \"BCFH\", \"BCEF\", \"CFBE\", \"BECG\" and \"CFGB\", respectively.\n\nOnce you are given the data described above, you are to reply with the given number of quiz questions as LaTeX code with\nsemantic markup to the best of your ability.\n\nTry to make sure that the questions you generate satisfy the following criteria:\n- The answer to a question should give a good indication regarding the extent to which the student has mastered the\n  concept with respect to the given competency.\n- We do not want students to rote-memorize definitions with respect to e.g. precise variable names used, so avoid making\n  the correct answers dependent on such details.\n- The correct answer should be unambiguous, particularly for fill-in-the-blanks questions. Do not ask for e.g.\n  what property some object has in a fill-in-the-blanks question, unless the text of the question makes it unambiguously\n  clear to anyone having mastered the concept, what precise property is meant.\n- The questions should be as diverse as possible, i.e. they should test for different aspects of the concept.\n- Do not put any text in the LaTeX code that directly states which answer is correct - students will be shown the text,\n  and the macros used above take optional arguments that already indicate this.\n- Try to provide good feedback, especially for wrong answers, so that students can learn what they did wrong.\n\n%%%%\nconcept: %%CONCEPT%%\ncourse: %%COURSE%%\ncompetency: %%COMPETENCY%%\nnumber of questions: %%NUMBER_OF_QUESTIONS%%\nlearning objects: %%SECTION_STEX_1%%"
    ],
    "defaultAssignment": [
        {
            "key": "CONCEPT",
            "value": "Minimax algorithm"
        },
        {
            "key": "COURSE",
            "value": "Artificial Intelligence"
        },
        {
            "key": "COMPETENCY",
            "value": "understand"
        },
        {
            "key": "NUMBER_OF_QUESTIONS",
            "value": "3"
        },
        {
            "key": "SECTION_STEX_1",
            "value": "MiKoMH/AI||game-play/sec/minimax.en.tex"
        }
    ],
    "updater": "Abhishek Chugh (ym23eqaw)",
    "updateTime": "2023-12-29T16:48:14.838407"
}